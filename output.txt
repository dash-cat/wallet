{
  address: {
    fromBase58Check: [Function: fromBase58Check],
    fromBech32: [Function: fromBech32],
    toBase58Check: [Function: toBase58Check],
    toBech32: [Function: toBech32],
    fromOutputScript: [Function: fromOutputScript],
    toOutputScript: [Function: toOutputScript]
  },
  crypto: {
    ripemd160: [Function: ripemd160],
    sha1: [Function: sha1],
    sha256: [Function: sha256],
    hash160: [Function: hash160],
    hash256: [Function: hash256],
    TAGS: [
      'BIP0340/challenge',
      'BIP0340/aux',
      'BIP0340/nonce',
      'TapLeaf',
      'TapBranch',
      'TapSighash',
      'TapTweak',
      'KeyAgg list',
      'KeyAgg coefficient'
    ],
    TAGGED_HASH_PREFIXES: {
      'BIP0340/challenge': <Buffer 7b b5 2d 7a 9f ef 58 32 3e b1 bf 7a 40 7d b3 82 d2 f3 f2 d8 1b b1 22 4f 49 fe 51 8f 6d 48 d3 7c 7b b5 2d 7a 9f ef 58 32 3e b1 bf 7a 40 7d b3 82 d2 f3 ... 14 more bytes>,
      'BIP0340/aux': <Buffer f1 ef 4e 5e c0 63 ca da 6d 94 ca fa 9d 98 7e a0 69 26 58 39 ec c1 1f 97 2d 77 a5 2e d8 c1 cc 90 f1 ef 4e 5e c0 63 ca da 6d 94 ca fa 9d 98 7e a0 69 26 ... 14 more bytes>,
      'BIP0340/nonce': <Buffer 07 49 77 34 a7 9b cb 35 5b 9b 8c 7d 03 4f 12 1c f4 34 d7 3e f7 2d da 19 87 00 61 fb 52 bf eb 2f 07 49 77 34 a7 9b cb 35 5b 9b 8c 7d 03 4f 12 1c f4 34 ... 14 more bytes>,
      TapLeaf: <Buffer ae ea 8f dc 42 08 98 31 05 73 4b 58 08 1d 1e 26 38 d3 5f 1c b5 40 08 d4 d3 57 ca 03 be 78 e9 ee ae ea 8f dc 42 08 98 31 05 73 4b 58 08 1d 1e 26 38 d3 ... 14 more bytes>,
      TapBranch: <Buffer 19 41 a1 f2 e5 6e b9 5f a2 a9 f1 94 be 5c 01 f7 21 6f 33 ed 82 b0 91 46 34 90 d0 5b f5 16 a0 15 19 41 a1 f2 e5 6e b9 5f a2 a9 f1 94 be 5c 01 f7 21 6f ... 14 more bytes>,
      TapSighash: <Buffer f4 0a 48 df 4b 2a 70 c8 b4 92 4b f2 65 46 61 ed 3d 95 fd 66 a3 13 eb 87 23 75 97 c6 28 e4 a0 31 f4 0a 48 df 4b 2a 70 c8 b4 92 4b f2 65 46 61 ed 3d 95 ... 14 more bytes>,
      TapTweak: <Buffer e8 0f e1 63 9c 9c a0 50 e3 af 1b 39 c1 43 c6 3e 42 9c bc eb 15 d9 40 fb b5 c5 a1 f4 af 57 c5 e9 e8 0f e1 63 9c 9c a0 50 e3 af 1b 39 c1 43 c6 3e 42 9c ... 14 more bytes>,
      'KeyAgg list': <Buffer 48 1c 97 1c 3c 0b 46 d7 f0 b2 75 ae 59 8d 4e 2c 7e d7 31 9c 59 4a 5c 6e c7 9e a0 d4 99 02 94 f0 48 1c 97 1c 3c 0b 46 d7 f0 b2 75 ae 59 8d 4e 2c 7e d7 ... 14 more bytes>,
      'KeyAgg coefficient': <Buffer bf c9 04 03 4d 1c 88 e8 c8 0e 22 e5 3d 24 56 6d 64 82 4e d6 42 72 81 c0 91 00 f9 4d cd 52 c9 81 bf c9 04 03 4d 1c 88 e8 c8 0e 22 e5 3d 24 56 6d 64 82 ... 14 more bytes>
    },
    taggedHash: [Function: taggedHash]
  },
  networks: {
    bitcoin: {
      messagePrefix: '\x18Bitcoin Signed Message:\n',
      bech32: 'bc',
      bip32: [Object],
      pubKeyHash: 0,
      scriptHash: 5,
      wif: 128
    },
    regtest: {
      messagePrefix: '\x18Bitcoin Signed Message:\n',
      bech32: 'bcrt',
      bip32: [Object],
      pubKeyHash: 111,
      scriptHash: 196,
      wif: 239
    },
    testnet: {
      messagePrefix: '\x18Bitcoin Signed Message:\n',
      bech32: 'tb',
      bip32: [Object],
      pubKeyHash: 111,
      scriptHash: 196,
      wif: 239
    }
  },
  payments: {
    embed: [Getter],
    p2ms: [Getter],
    p2pk: [Getter],
    p2pkh: [Getter],
    p2sh: [Getter],
    p2wpkh: [Getter],
    p2wsh: [Getter],
    p2tr: [Getter]
  },
  script: {
    OPS: [Getter],
    isPushOnly: [Function: isPushOnly],
    countNonPushOnlyOPs: [Function: countNonPushOnlyOPs],
    compile: [Function: compile],
    decompile: [Function: decompile],
    toASM: [Function: toASM],
    fromASM: [Function: fromASM],
    toStack: [Function: toStack],
    isCanonicalPubKey: [Function: isCanonicalPubKey],
    isDefinedHashType: [Function: isDefinedHashType],
    isCanonicalScriptSignature: [Function: isCanonicalScriptSignature],
    number: { decode: [Function: decode], encode: [Function: encode] },
    signature: { decode: [Function: decode], encode: [Function: encode] }
  },
  Block: [Getter],
  Psbt: [Getter],
  opcodes: [Getter],
  Transaction: [Getter],
  initEccLib: [Getter]
}
